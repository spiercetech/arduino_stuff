#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <ESP8266mDNS.h>
#include <EEPROM.h>

/*
 * This example serves a "hello world" on a WLAN and a SoftAP at the same time.
 * The SoftAP allow you to configure WLAN parameters at run time. They are not setup in the sketch but saved on EEPROM.
 * 
 * Connect your computer or cell phone to wifi network ESP_ap with password 12345678. A popup may appear and it allow you to go to WLAN config. If it does not then navigate to http://192.168.4.1/wifi and config it there.
 * Then wait for the module to connect to your wifi and take note of the WLAN IP it got. Then you can disconnect from ESP_ap and return to your regular WLAN.
 * 
 * Now the ESP8266 is in your network. You can reach it through http://192.168.x.x/ (the IP you took note of) or maybe at http://esp8266.local too.
 * 
 * This is a captive portal because through the softAP it will redirect any http request to http://192.168.4.1/
 */

/* Set these to your desired softAP credentials. They are not configurable at runtime */
const char *softAP_ssid = "ESP_Lights";
const char *softAP_password = "12345678";

/* hostname for mDNS. Should work at least on windows. Try http://esp8266.local */
const char *myHostname = "esp8266";

/* Don't set this wifi credentials. They are configurated at runtime and stored on EEPROM */
char ssid[32] = "";
char password[32] = "";

// DNS server
const byte DNS_PORT = 53;
DNSServer dnsServer;

// Web server
ESP8266WebServer server(80);

/* Soft AP network parameters */
IPAddress apIP(192, 168, 4, 1);
IPAddress netMsk(255, 255, 255, 0);

/** Should I connect to WLAN asap? */
boolean connect;

/** Last time I tried to connect to WLAN */
long lastConnectTry = 0;

/** Current WLAN status */
int status = WL_IDLE_STATUS;

/** Extra Variables */
String light = "OFF";

void setup() {
  delay(1000);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  pinMode(LED_BUILTIN, OUTPUT);
  delay(1000);
  digitalWrite(LED_BUILTIN, HIGH);
  light = "OFF";
  
  /* You can remove the password parameter if you want the AP to be open. */
  WiFi.softAPConfig(apIP, apIP, netMsk);
  WiFi.softAP(softAP_ssid, softAP_password);
  delay(500); // Without delay I've seen the IP address blank
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());

  /* Setup the DNS server redirecting all the domains to the apIP */  
  dnsServer.setErrorReplyCode(DNSReplyCode::NoError);
  /* dnsServer.start(DNS_PORT, "*", apIP); */
  dnsServer.start(DNS_PORT, "www.example.com", apIP);

  /* Setup web pages: root, wifi config pages, SO captive portal detectors and not found. */
  server.on("/", handleRoot);
  server.on("/wifi", handleWifi);
  server.on("/wifisave", handleWifiSave);
  server.on("/generate_204", handleRoot);  //Android captive portal. Maybe not needed. Might be handled by notFound handler.
  server.on("/fwlink", handleRoot);  //Microsoft captive portal. Maybe not needed. Might be handled by notFound handler.
  
  server.on("/lightSwitch", handleLightSwitch);
  server.onNotFound ( handleNotFound );
  server.begin(); // Web server start
  Serial.println("HTTP server started");
  loadCredentials(); // Load WLAN credentials from network
  connect = strlen(ssid) > 0; // Request WLAN connect if there is a SSID
}

void connectWifi() {
  Serial.println("Connecting as wifi client...");
  WiFi.disconnect();
  WiFi.begin ( ssid, password );
  int connRes = WiFi.waitForConnectResult();
  Serial.print ( "connRes: " );
  Serial.println ( connRes );
}

void loop() {
  if (connect) {
    Serial.println ( "Connect requested" );
    connect = false;
    connectWifi();
    lastConnectTry = millis();
  }
  {
    int s = WiFi.status();
    if (s == 0 && millis() > (lastConnectTry + 60000) ) {
      /* If WLAN disconnected and idle try to connect */
      /* Don't set retry time too low as retry interfere the softAP operation */
      connect = true;
    }
    if (status != s) { // WLAN status change
      Serial.print ( "Status: " );
      Serial.println ( s );
      status = s;
      if (s == WL_CONNECTED) {
        /* Just connected to WLAN */
        Serial.println ( "" );
        Serial.print ( "Connected to " );
        Serial.println ( ssid );
        Serial.print ( "IP address: " );
        Serial.println ( WiFi.localIP() );

        // Setup MDNS responder
        if (!MDNS.begin(myHostname)) {
          Serial.println("Error setting up MDNS responder!");
        } else {
          Serial.println("mDNS responder started");
          // Add service to MDNS-SD
          MDNS.addService("http", "tcp", 80);
        }
      } else if (s == WL_NO_SSID_AVAIL) {
        WiFi.disconnect();
      }
    }
  }
  // Do work:
  //DNS
  dnsServer.processNextRequest();
  //HTTP
  server.handleClient();
}

/** Load WLAN credentials from EEPROM */
void loadCredentials() {
  EEPROM.begin(512);
  EEPROM.get(0, ssid);
  EEPROM.get(0+sizeof(ssid), password);
  char ok[2+1];
  EEPROM.get(0+sizeof(ssid)+sizeof(password), ok);
  EEPROM.end();
  if (String(ok) != String("OK")) {
    ssid[0] = 0;
    password[0] = 0;
  }
  Serial.println("Recovered credentials:");
  Serial.println(ssid);
  Serial.println(strlen(password)>0?"********":"<no password>");
}

/** Store WLAN credentials to EEPROM */
void saveCredentials() {
  EEPROM.begin(512);
  EEPROM.put(0, ssid);
  EEPROM.put(0+sizeof(ssid), password);
  char ok[2+1] = "OK";
  EEPROM.put(0+sizeof(ssid)+sizeof(password), ok);
  EEPROM.commit();
  EEPROM.end();
}

/** Is this an IP? */
boolean isIp(String str) {
  for (int i = 0; i < str.length(); i++) {
    int c = str.charAt(i);
    if (c != '.' && (c < '0' || c > '9')) {
      return false;
    }
  }
  return true;
}

/** IP to String? */
String toStringIp(IPAddress ip) {
  String res = "";
  for (int i = 0; i < 3; i++) {
    res += String((ip >> (8 * i)) & 0xFF) + ".";
  }
  res += String(((ip >> 8 * 3)) & 0xFF);
  return res;
}

String htmlTemplateTop = "<html><head><style>"
  "* {box-sizing: border-box;}"
  "body {font-family: Sans-serif;background: #edece7;}"
  ".switch {display: block;position: relative;width: 70px;height: 100px;margin: 70px auto;border-radius: 50px;background: #e6e3da;background: linear-gradient(#e6e3da, #fff);border: 1px solid rgba(0,0,0,0.1);box-shadow: inset 0 7px 0 #fdfdfd,0 2px 3px rgba(170, 160, 140,.3);cursor: pointer;}"
  ".switch:before {content: '';position: absolute;top: -10px; bottom: -10px;left: -5px; right: -5px;z-index: -1;background: #f2f1ed;border-radius: inherit;box-shadow:0 1px 1px rgba(#aea391,0.2),0 3px 3px rgba(170, 160, 140, 0.4),inset 0 1px 0 rgba(255,255,255,0.8),0 0 5px rgba(170, 160, 140, 0.5);}"
  ".switch:after {content: "";position:absolute;width: 60px;height: 70px;border-radius: 50%;z-index: -1;left: 18px;top: 10px;background: linear-gradient(160deg, rgba(170, 160, 140, 0.7), rgba(170, 160, 140, 0));background: -webkit-linear-gradient(290deg, rgba(170, 160, 140, 0.75), rgba(170, 160, 140, 0));-webkit-filter: blur(1px);}"
  "#switch {clip: rect(0 0 0 0);position: absolute;visibility: hidden;}"
  "#switch:checked ~ .switch {background: linear-gradient(#f7f6f4, #fff);box-shadow:inset 0 -5px 0 #dbd3c8,0 6px 5px rgba(170, 160, 140, 0.75),3px 16px 5px rgba(170,160,140, 0.3);border-bottom: none;}"
  "#switch:checked ~ .switch:after {display: none;}"
  "a {color:#000000;}"
  "#title {width:100%;text-align:center;font-size:40px;padding:10px;background:#336699;border-bottom: 2px solid #333333;}"
  "#network {width:100%;text-align:center;border-bottom: 2px solid #333333;}"
  ".network-item {font-size:30px;}"
  "#lights {width:100%;text-align:center;background:";
String htmlTemplateTopTwo = ";padding:30px;border-bottom: 2px solid #333333;}"
  "#light-status {border: 2px solid #333333;width:200px;margin:0 auto;background: #cccccc;border-radius: 20px;}"
  ".light-item {font-size:30px;margin:0 10px 10px 10px;}"
  "</style></head><body><div id='page'><div id='title'>ESP8266-01 Interface</div>";
String htmlTemplateBottom = "</div></body></html>";
String htmlLight = "<div id='lights'><p id='light-label' class='light-item'>Light Switch</p><p id='light-status' class='light-item'><input type='checkbox' name='switch' id='switch' onclick='window.location = &apos;/lightSwitch&apos;'><label class='switch' for='switch'></label></p></div>";
String htmlNetworkOne = "<div id='network'><p id='current-connection' class='network-item'>You are connected through the wifi network: <b>";
String htmlNetworkTwo = "</b></p><p id='access-point' class='network-item'><b>SoftAP config</b><br />SSID: ";
String htmlNetworkThree = "<br />IP: ";
String htmlNetworkFour = "</p><p id='access-point' class='network-item'><b>WLAN config</b><br />SSID: ";
String htmlNetworkFive = "<br />IP: ";
String htmlNetworkSix = "</p><p id='current-connection' class='network-item'><a href='/wifi'>Edit Network Settings</a></p></div>";

/** Handle root or redirect to captive portal */
void handleRoot() {
  if (captivePortal()) { // If caprive portal redirect instead of displaying the page.
    return;
  }

  //Handle Light information
  light = (light == "ON" ? "ON" : "OFF");
  digitalWrite(LED_BUILTIN, (light == "ON" ? LOW : HIGH));
  String lightColor = (light == "ON" ? "#FFFF66" : "#666666");

  //Start page content
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.setContentLength(CONTENT_LENGTH_UNKNOWN);
  server.send(200, "text/html", ""); // Empty content inhibits Content-length header so we have to close the socket ourselves.

  //Put together HTML Template & Light Color
  server.sendContent(htmlTemplateTop + lightColor + htmlTemplateTopTwo + htmlNetworkOne);

  if (server.client().localIP() == apIP) {
    server.sendContent(String(softAP_ssid));
  } else {
    server.sendContent(String(ssid));
  }

  server.sendContent(htmlNetworkTwo + String(softAP_ssid) + htmlNetworkThree + toStringIp(WiFi.softAPIP()));
  server.sendContent(htmlNetworkFour + String(ssid) + htmlNetworkFive + toStringIp(WiFi.localIP()) + htmlNetworkSix);

  server.sendContent(htmlLight + htmlTemplateBottom);

  server.client().stop(); // Stop is needed because we sent no content length
}

/** Redirect to captive portal if we got a request for another domain. Return true in that case so the page handler do not try to handle the request again. */
boolean captivePortal() {
  if (!isIp(server.hostHeader()) && server.hostHeader() != (String(myHostname)+".local")) {
    Serial.print("Request redirected to captive portal");
    server.sendHeader("Location", String("http://") + toStringIp(server.client().localIP()), true);
    server.send ( 302, "text/plain", ""); // Empty content inhibits Content-length header so we have to close the socket ourselves.
    server.client().stop(); // Stop is needed because we sent no content length
    return true;
  }
  return false;
}

/** Wifi config page handler */
void handleWifi() {
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.setContentLength(CONTENT_LENGTH_UNKNOWN);
  server.send(200, "text/html", ""); // Empty content inhibits Content-length header so we have to close the socket ourselves.
  server.sendContent(
    "<html><head></head><body>"
    "<h1>Wifi config</h1>"
  );
  if (server.client().localIP() == apIP) {
    server.sendContent(String("<p>You are connected through the soft AP: ") + softAP_ssid + "</p>");
  } else {
    server.sendContent(String("<p>You are connected through the wifi network: ") + ssid + "</p>");
  }
  server.sendContent(
    "\r\n<br />"
    "<table><tr><th align='left'>SoftAP config</th></tr>"
  );
  server.sendContent(String() + "<tr><td>SSID " + String(softAP_ssid) + "</td></tr>");
  server.sendContent(String() + "<tr><td>IP " + toStringIp(WiFi.softAPIP()) + "</td></tr>");
  server.sendContent(
    "</table>"
    "\r\n<br />"
    "<table><tr><th align='left'>WLAN config</th></tr>"
  );
  server.sendContent(String() + "<tr><td>SSID " + String(ssid) + "</td></tr>");
  server.sendContent(String() + "<tr><td>IP " + toStringIp(WiFi.localIP()) + "</td></tr>");
  server.sendContent(
    "</table>"
    "\r\n<br /><form method='POST' action='wifisave'><h4>Connect to network:</h4>"
    "<input type='text' placeholder='network' id='n' name='n'/>"
    "<br /><input type='password' placeholder='password' name='p'/>"
    "<br /><input type='submit' value='Connect/Disconnect'/></form>"
    "\r\n<br />"
    "<table><tr><th align='left'>WLAN list <a href='/wifi'>(refresh if any missing)</a></th></tr>"
  );
  Serial.println("scan start");
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n > 0) {
    for (int i = 0; i < n; i++) {
      server.sendContent(String() + "\r\n<tr><td style = 'text-decoration:underline; cursor:pointer;' onclick='document.getElementById(&apos;n&apos;).value=&apos;" + WiFi.SSID(i) + " &apos;' >SSID " + WiFi.SSID(i) + " " + String(WiFi.encryptionType(i)) + " (" + WiFi.RSSI(i) + ")</td></tr>");
    }
  } else {
    server.sendContent(String() + "<tr><td>No WLAN found</td></tr>");
  }
  server.sendContent(
    "</table>"
    "\r\n<br />"
    "<p>You may want to <a href='/'>return to the home page</a>.</p>"
    "</body></html>"
  );
  server.client().stop(); // Stop is needed because we sent no content length
}

/** Handle the WLAN save form and redirect to WLAN config page again */
void handleWifiSave() {
  Serial.println("wifi save");
  server.arg("n").toCharArray(ssid, sizeof(ssid) - 1);
  server.arg("p").toCharArray(password, sizeof(password) - 1);
  server.sendHeader("Location", "wifi", true);
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.send ( 302, "text/plain", "");  // Empty content inhibits Content-length header so we have to close the socket ourselves.
  server.client().stop(); // Stop is needed because we sent no content length
  saveCredentials();
  connect = strlen(ssid) > 0; // Request WLAN connect with new credentials if there is a SSID
}

void handleNotFound() {
  if (captivePortal()) { // If caprive portal redirect instead of displaying the error page.
    return;
  }
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += ( server.method() == HTTP_GET ) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";

  for ( uint8_t i = 0; i < server.args(); i++ ) {
    message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n";
  }
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.send ( 404, "text/plain", message );
}

/** Handle Light Controls */
void handleLightSwitch() {
  //Handle Light information
  light = (light == "ON" ? "OFF" : "ON");
  digitalWrite(LED_BUILTIN, (light == "ON" ? LOW : HIGH));
  String lightColor = (light == "ON" ? "#FFFF66" : "#666666");

  //Start page content
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.setContentLength(CONTENT_LENGTH_UNKNOWN);
  server.send(200, "text/html", ""); // Empty content inhibits Content-length header so we have to close the socket ourselves.

  //Put together HTML Template & Light Color
  server.sendContent(htmlTemplateTop + lightColor + htmlTemplateTopTwo + htmlNetworkOne);

  if (server.client().localIP() == apIP) {
    server.sendContent(String(softAP_ssid));
  } else {
    server.sendContent(String(ssid));
  }

  server.sendContent(htmlNetworkTwo + String(softAP_ssid) + htmlNetworkThree + toStringIp(WiFi.softAPIP()));
  server.sendContent(htmlNetworkFour + String(ssid) + htmlNetworkFive + toStringIp(WiFi.localIP()) + htmlNetworkSix);

  server.sendContent(htmlLight + htmlTemplateBottom);

  server.client().stop(); // Stop is needed because we sent no content length
}